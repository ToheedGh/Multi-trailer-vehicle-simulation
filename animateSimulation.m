% This is a code that creates a simple animation of the vehicle simulation.
% This code uses the data in 'parameters.m' as well as the date generated by
% 'vehicleSimulation.m'.

% Written by: Toheed Ghandriz, October 2020

u1Size =      [param.len(1); param.wt(1)]; % Length and width of the vehicle unit
u2Size =      [param.len(2); param.wt(2)];
u3Size =      [param.len(3); param.wt(3)];
u4Size =      [param.len(4); param.wt(4)];
U1cogPosLoc = [param.cog2R(1);param.wt(1)/2]; % local position of cog with respect to rear left corrner of the unit
U2cogPosLoc = [param.cog2R(2);param.wt(2)/2];
U3cogPosLoc = [param.cog2R(3);param.wt(3)/2];
U4cogPosLoc = [param.cog2R(4);param.wt(4)/2];

phi2 = phi1-thet1;                   
phi3 = phi1-thet1-thet2; 
phi4 = phi1-thet1-thet2-thet3; 

p2cog = [X + param.xC(1,2)*cos(phi1)- param.xC(2,1)*cos(phi2),...  % Second vehicle unit COG trajectory
         Y + param.xC(1,2)*sin(phi1)- param.xC(2,1)*sin(phi2)];
    
p3cog = [X + param.xC(1,2)*cos(phi1)-(param.xC(2,1)-param.xC(2,2))*cos(phi2)-(param.xC(3,1))*cos(phi3),...  % Third vehicle unit COG trajectory
         Y + param.xC(1,2)*sin(phi1)-(param.xC(2,1)-param.xC(2,2))*sin(phi2)-(param.xC(3,1))*sin(phi3)];
     
p4cog = [X + param.xC(1,2)*cos(phi1)-(param.xC(2,1)-param.xC(2,2))*cos(phi2)-(param.xC(3,1)-param.xC(3,2))*cos(phi3)- param.xC(4,1)*cos(phi4),... % Fourth vehicle unit COG trajectory
         Y + param.xC(1,2)*sin(phi1)-(param.xC(2,1)-param.xC(2,2))*sin(phi2)-(param.xC(3,1)-param.xC(3,2))*sin(phi3)- param.xC(4,1)*sin(phi4)];

posFM4 = [X + param.xC(1,2)*cos(phi1)-(param.xC(2,1)-param.xC(2,2))*cos(phi2)-(param.xC(3,1)-param.xC(3,2))*cos(phi3)- (param.xC(4,1)+param.cog2R(4))*cos(phi4),... % Fourth vehicle unit read edge trajectory
          Y + param.xC(1,2)*sin(phi1)-(param.xC(2,1)-param.xC(2,2))*sin(phi2)-(param.xC(3,1)-param.xC(3,2))*sin(phi3)- (param.xC(4,1)+param.cog2R(4))*sin(phi4)];
  

rec1=0;rec2=0;rec3=0;rec4=0;
figure('Name','Animation')
plot(X,Y,'--')
xlabel('X (m)');
ylabel('Y (m)');
hold on
skipSteps = 10;
for i=1:skipSteps:length(t)-skipSteps
    
    % Frist vehicle unit
    loc2glob01 = [cos(phi1(i)) , -sin(phi1(i)); sin(phi1(i)) ,  cos(phi1(i))]; % Transformation matrix from the first unit local frame to the global frame.
    U1cogPosGl = loc2glob01*U1cogPosLoc; 
    posRL1 = [X(i)-U1cogPosGl(1); Y(i)-U1cogPosGl(2)];     % Global position of the rear left corner
    posRR1 = posRL1 + loc2glob01*[u1Size(1);0];            % Global position of the rear right corner
    posFR1 = posRL1 + loc2glob01*u1Size;                   % Global position of the front right corner
    posFL1 = posRL1 + loc2glob01*[0;u1Size(2)];            % Global position of the front left corner
   
    % Second vehicle unit
    loc2glob02 = [cos(phi2(i)) , -sin(phi2(i)); sin(phi2(i)) ,  cos(phi2(i))];
    U2cogPosGl = loc2glob02*U2cogPosLoc; 
    posRL2 = [p2cog(i,1)-U2cogPosGl(1); p2cog(i,2)-U2cogPosGl(2)]; 
    posRR2 = posRL2 + loc2glob02*[u2Size(1);0]; 
    posFR2 = posRL2 + loc2glob02* u2Size;       
    posFL2 = posRL2 + loc2glob02*[0;u2Size(2)];

    % Third vehicle unit
    loc2glob03 = [cos(phi3(i)) , -sin(phi3(i)); sin(phi3(i)) ,  cos(phi3(i))];
    U3cogPosGl = loc2glob03*U3cogPosLoc; 
    posRL3 = [p3cog(i,1)-U3cogPosGl(1); p3cog(i,2)-U3cogPosGl(2)]; 
    posRR3 = posRL3 + loc2glob03*[u3Size(1);0]; 
    posFR3 = posRL3 + loc2glob03* u3Size;       
    posFL3 = posRL3 + loc2glob03*[0;u3Size(2)]; 

    % Fourth vehicle unit
    loc2glob04 = [cos(phi4(i)) , -sin(phi4(i)); sin(phi4(i)) ,  cos(phi4(i))];
    U4cogPosGl = loc2glob04*U4cogPosLoc; 
    posRL4 = [p4cog(i,1)-U4cogPosGl(1); p4cog(i,2)-U4cogPosGl(2)]; 
    posRR4 = posRL4 + loc2glob04*[u4Size(1);0]; 
    posFR4 = posRL4 + loc2glob04* u4Size;      
    posFL4 = posRL4 + loc2glob04*[0;u4Size(2)]; 
    
    rec1 = patch([posRL1(1) posRR1(1)  posFR1(1)   posFL1(1)],[posRL1(2) posRR1(2)  posFR1(2)   posFL1(2)],'c');
    alpha(0.3)
    rec2 = patch([posRL2(1) posRR2(1)  posFR2(1)   posFL2(1)],[posRL2(2) posRR2(2)  posFR2(2)   posFL2(2)],'b');
    alpha(0.3) 
    rec3 = patch([posRL3(1) posRR3(1)  posFR3(1)   posFL3(1)],[posRL3(2) posRR3(2)  posFR3(2)   posFL3(2)],'g');
    alpha(0.3) 
    rec4 = patch([posRL4(1) posRR4(1)  posFR4(1)   posFL4(1)],[posRL4(2) posRR4(2)  posFR4(2)   posFL4(2)],'b');
    alpha(0.3) 
    
    offTracking = plot(posFM4(1:i,1),posFM4(1:i,2),'r--');
    
    pause(.01);

    xlim([X(i)-30 X(i)+30])
    ylim([Y(i)-30 Y(i)+30])
    
    if i < length(t)-skipSteps && i>=1
        delete(rec1)
        delete(rec2)
        delete(rec3)
        delete(rec4)   
        delete(offTracking)      
    end
end
